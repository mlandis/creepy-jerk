/*
 * CondLikes.h
 *
 *  Created on: Mar 30, 2011
 *      Author: mlandis
 */

#ifndef CONDLIKES_H_
#define CONDLIKES_H_

#include "Expression.h"
#include "Settings.h"


#include <gsl/gsl_complex.h>
#include <gsl/gsl_complex_math.h>
#include <gsl/gsl_errno.h>
#include <gsl/gsl_fft_complex.h>
#include <vector>

class Expression;
class Settings;

class CondLikes {

public:
															CondLikes(Expression* ep, Settings* sp);
															~CondLikes();
	double*							getCls(int space, int node, int trans, int time, int step)	{ return &cls[space][node][trans][time][step]; }
	//gsl_complex*					getCls(int space, int node, int trans, int time, int step)	{ return &cls[space][node][trans][time][2*step]; }
	std::vector<double>*			getCls(int space, int node, int trans, int time)			{ return &cls[space][node][trans][time]; }

	//const std::vector<std::vector<std::vector<double> > >&	getCls(int space, int node, int trans, int time);
	//const std::vector<std::vector<std::vector<std::vector<double> > > >&	getCls(int space, int node, int trans, int time, int step);
	//void													setCls(int space, int node, in)
	void													print(void);

private:

	Expression* expressionPtr;
	Settings* settingsPtr;

	// [space][node][locus][timepoint][step]
	std::vector<std::vector<std::vector<std::vector<std::vector<double> > > > > cls;

	//double***** clP;
	//double***** clR;
	//double***** clL;

	//double* clPtrP;
	//double* clPtrL;
	//double* clPtrR;

	int numNodes;
	int numTaxa;
	int numTimePoints;
	int numTranscripts;
	int numSteps;

};

#endif /* CONDLIKES_H_ */
