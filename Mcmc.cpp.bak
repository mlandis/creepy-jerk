/*
 * Mcmc.cpp
 *
 *  Created on: Mar 7, 2011
 *      Author: mlandis
 */

#include "Mcmc.h"

Mcmc::Mcmc(Settings* sp, MbRandom* rp) {

	settingsPtr = sp;
	randomPtr = rp;


	numCycles = 1000;
	printFreqMH = 10;
	printFreqCRP = 10;

	runChain();
}

Mcmc::~Mcmc() {
	// TODO Auto-generated destructor stub
}

void Mcmc::runChain()
{

	double oldLnL = 0.0;


	for (int n = 1; n < numCycles; n++)
	{
		double newLnL = 0.0;

		bool accept = false;
		double u = randomPtr->uniformRv();
		double r = newLnL - oldLnL;

		if (u < r) accept = true;

		if (n % printFreqMH == 0)
		{
			std::cout << std::setw(10) << std::setprecision(10) << oldLnL << " -> " << newLnL << "\t";
			if (accept)
			{
				std::cout << "Accepted\n";
			}
			else
			{
				std::cout << "Rejected\n";
			}
		}

		if (n % (printFreqMH * printFreqCRP) == 0)
		{
			std::cout << "CRP states:\n";
		}

		if (accept)
		{
			acceptState();
		}
		else
		{
			rejectState();
		}
	}
}


Parm* Mcmc::proposeState(void)
{

}

double Mcmc::safeExp(double lnX)
{

	// TODO: check later

	if (lnX < -300.0)
	{
		return 0.0;
	}
	else if(lnX > 1.0)
	{
		// use for MH ratio r = min(1, ratio)
		return 1.0;
	}
	else
	{
		return exp(lnX);
	}

	return exp(lnX);
}
