/*
 * CondLikes.cpp
 *
 *  Created on: Mar 30, 2011
 *      Author: mlandis
 */

#include "CondLikes.h"

CondLikes::CondLikes(Expression* ep, Settings* sp) {

	std::cout << "INITIALIZING: Conditional likelihoods\n";

	expressionPtr = ep;
	settingsPtr = sp;

	numTaxa = expressionPtr->getNumTaxa();
	numNodes = 2 * numTaxa - 1;
	numTimePoints = expressionPtr->getNumTimepoints();
	numTranscripts = expressionPtr->getNumTranscripts();
	numSteps = settingsPtr->getNumSteps();

	// Allocate CL size
	cls.resize(2);
	for (int n = 0; n < 2; n++)
	{
		cls[n].resize(numNodes);
		for (int i = 0; i < numNodes; i++)
		{
			cls[n][i].resize(numTranscripts);
			for (int j = 0; j < numTranscripts; j++)
			{
				cls[n][i][j].resize(numTimePoints);
				for (int k = 0; k < numTimePoints; k++)
				{
					// factor of 2 for (Re,Im) of complex number needed?
					cls[n][i][j][k].assign(2 * numSteps, 0.0);
				}
			}
		}
	}

	// Assign observed values to tips (tips are nodes 0, numTaxa)
	for (int i = 0; i < numTaxa; i++)
	{
		cls[0][i];
	}


}

CondLikes::~CondLikes() {
	// TODO Auto-generated destructor stub
	// Don't think there's anything to do.
}


/*
std::vector<std::vector<std::vector<std::vector<double> > > >& CondLikes::getCls(int space, int node, int transcript, int timepoint, int step)
{
	return cls[space][node][transcript][timepoint][step];
}
*/

void CondLikes::print()
{
	for (int n = 0; n < 2; n++)
	{
		std::cout << "n=" << n << "\n";
		for (int i = 0; i < numNodes; i++)
		{
			std::cout << std::setw(4) << i << ":";
			for (int j = 0; j < numTranscripts; j++)
			{
				std::cout << "\t( ";
				for (int k = 0; k < numTimePoints; k++)
				{
					for (int l = 0; l < numSteps; l++)
					{
						std::cout << cls[n][i][j][k][l] << " ";
					}
				}
				std::cout << ")";
			}
			std::cout << "\n";
		}
		std::cout << "\n";
	}
	std::cout << "\n";
}
